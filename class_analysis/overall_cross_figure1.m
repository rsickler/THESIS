% compares how well classification went for go--> imag vs. imag --> go 
class_analyzer; 

means = 100*[ mean_go_imag_PM mean_imag_go_PM; ...
              mean_go_imag_PS mean_imag_go_PS ; ...
              mean_go_imag_SM mean_imag_go_SM ; ...
              mean_go_imag_MP mean_imag_go_MP ; ...
              mean_go_imag_MI mean_imag_go_MI ; ...
              mean_go_imag_WB mean_imag_go_WB ; ...
              mean_go_imag_AM mean_imag_go_AM ];

stderrors =  100*[stderror_go_imag_PM stderror_imag_go_PM ; ...
                  stderror_go_imag_PS stderror_imag_go_PS; ...
                  stderror_go_imag_SM stderror_imag_go_SM ; ...
                  stderror_go_imag_MP stderror_imag_go_MP ; ...
                  stderror_go_imag_MI stderror_imag_go_MI ; ...
                  stderror_go_imag_WB stderror_imag_go_WB ; ...
                  stderror_go_imag_AM stderror_imag_go_AM ];

% values = 100*[go_imag_PM imag_go_PM; ...
%               go_imag_PS imag_go_PS; ...
%               go_imag_SM imag_go_SM; ...
%               go_imag_MP imag_go_MP; ...
%               go_imag_MI imag_go_MI; ...
%               go_imag_WB imag_go_WB; ...
%               go_imag_AM imag_go_AM];

values1= 100*[go_imag_PM; ...
              go_imag_PS; ...
              go_imag_SM; ...
              go_imag_MP; ...
              go_imag_MI; ...
              go_imag_WB; ...
              go_imag_AM];
values2= 100*[imag_go_PM; ...
              imag_go_PS; ...
              imag_go_SM; ...
              imag_go_MP; ...
              imag_go_MI; ...
              imag_go_WB; ...
              imag_go_AM];

% Creating axes and the bar graph
ax = axes;
h = bar(means,'BarWidth',1);
xt={'PM';'PS';'SM';'MP';'MI';'WB';'AM'}; 
set(gca,'xtick',1:7); 
set(gca,'xticklabel',xt);
ylim([0 100]);
h(1).FaceColor = 'green';
h(2).FaceColor = [0.9    0.4157    0.4882];

% Properties of the bar graph as required
ax.YGrid = 'on';
ax.GridLineStyle = '-';
% X and Y labels
xlabel('Applied Mask');
ylabel('Classifier Mean Accuracy (%)');
set(gca,'FontSize',18)

% add chance classification line
hold on
x2 = [0 8];
y2 = [100/3 100/3];
line(x2,y2,'Color','red','LineStyle','--')

% Finding the number of groups and the number of bars in each group
ngroups = size(means, 1);
nbars = size(means, 2);

% Calculating the width for each bar group
groupwidth = min(0.8, nbars/(nbars + 1.5));

% Set the position of each error bar in the centre of the main bar
for i = 1:nbars
    % Calculate center of each bar
    x = (1:ngroups) - groupwidth/2 + (2*i-1) * groupwidth / (2*nbars);
    errorbar(x, means(:,i), stderrors(:,i), 'k', 'linestyle', 'none');
end

% Creating a legend and placing it outside the bar plot
lg = legend('"go" --> "imagine"','"imagine" --> "go"');
lg.Location = 'BestOutside';
lg.Orientation = 'Horizontal';


% add individual data points
hold on        
for i=1:length(values1)
    x1 = repmat(i,1,length(values1(i,:)))-.15; %the first bar axis location
    x2 = repmat(i,1,length(values2(i,:)))+.15; %the second bar axis location
    x1 = x1+(rand(size(x1))-0.5)*0.01; %add a little random "jitter" to aid visibility
    x2 = x2+(rand(size(x2))-0.5)*0.01; %add a little random "jitter" to aid visibility
    plot(x1,values1(i,:),'.k','MarkerSize', 15)
    plot(x2,values2(i,:),'.k','MarkerSize', 15)
end

